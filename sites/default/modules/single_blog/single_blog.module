<?php

/**
* @file
* Enables a single-user blog.
*/

// Constants.
define('SINGLE_BLOG_NODE_TYPE', 'article');
define('SINGLE_BLOG_LIST_COUNT', 3);

/**
* Return a list of blog entries.
*
* @param $number
*   The number of blog entries to return.
* @return
*   A results set object containtn the list of blog entries.
*/
function single_blog_list($number) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created', 'uid'))
    ->condition('type', SINGLE_BLOG_NODE_TYPE)
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->range(0, $number)
    ->addTag('node_access')
    ->execute();

  return $query;
}

/**
* Implements hook_block_info().
*/
function single_blog_block_info() {
  $blocks = array();

  $blocks['recent'] = array(
    'info' => t('Recent blog posts'),
  );

  return $blocks;
}

/**
* Implements hookc_block_view().
*/
function single_blog_block_view($delta) {
  // Create an empty block.
  $block = array(
    'subject' => '',
    'content' => ''
  );

  if ($delta == 'recent') {
    // Create an empty block.
    $block['subject'] = t('Recent blog posts');

    // Check if the user can access content.
    if (user_access('access content')) {
      // Retrieve the most recent nodes.
      $result = single_blog_list(SINGLE_BLOG_LIST_COUNT);

      // Create links for each blog entry.
      $items = array();
      foreach ($result as $node) {
        $items[] = array(
          'data' => l($node->title, 'node/' . $node->nid),
          'class' => array('node-' . $node->nid)
        );
      }

      if (!empty($items)) {
        // Theme the list of block entries.
        $theme_data = array(
          'items' => $items
        );
        $block['content'] = theme('item_list', $theme_data);
      }
      else {
        $block['content'] = 'Nothing to display.';
      }
    }
  }

  return $block;
}














